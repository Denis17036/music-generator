import os
import sys
import logging
from fastapi import FastAPI
from pydantic import BaseModel
import subprocess

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–≥–µ—Ä–∞
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ —É—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
def install_dependencies():
    required_packages = {
        "uvicorn": "uvicorn[standard]==0.27.0",
        "fastapi": "fastapi==0.109.2",
        "torch": "torch==2.0.1+cpu",
        "transformers": "transformers==4.30.2",
        "scipy": "scipy==1.10.1",
        "pydub": "pydub==0.25.1"
    }
    
    missing_packages = []
    for package in required_packages:
        try:
            __import__(package)
            logger.info(f"‚úÖ {package} —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        except ImportError:
            missing_packages.append(required_packages[package])
            logger.warning(f"‚ùå {package} –Ω–µ –Ω–∞–π–¥–µ–Ω")
    
    if missing_packages:
        logger.info("–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏...")
        try:
            subprocess.run(
                [sys.executable, "-m", "pip", "install"] + missing_packages,
                check=True
            )
            logger.info("‚úÖ –ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã")
            # –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –ø–æ—Å–ª–µ —É—Å—Ç–∞–Ω–æ–≤–∫–∏
            os.execv(sys.executable, [sys.executable] + sys.argv)
        except subprocess.CalledProcessError as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π: {e}")
            sys.exit(1)

# –í—ã–∑—ã–≤–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π –ø–µ—Ä–µ–¥ —Å–æ–∑–¥–∞–Ω–∏–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
install_dependencies()

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –ø–æ—Å–ª–µ –ø—Ä–æ–≤–µ—Ä–∫–∏
from transformers import AutoProcessor, MusicgenForConditionalGeneration
import torch
import scipy.io.wavfile as wav
from pydub import AudioSegment
import io
import numpy as np

# –°–æ–∑–¥–∞–µ–º FastAPI –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
app = FastAPI(title="üéµ –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –º—É–∑—ã–∫–∏", version="1.0")

# –ó–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥–µ–ª–∏ (–≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –∑–∞–ø—Ä–æ—Å–µ)
model = None
processor = None

class GenerationRequest(BaseModel):
    prompt: str
    duration: float = 30.0  # –î–ª–∏–Ω–∞ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
    temperature: float = 1.0
    guidance_scale: float = 3.0

def load_model():
    global model, processor
    if model is None:
        logger.info("‚è≥ –ó–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥–µ–ª–∏...")
        model = MusicgenForConditionalGeneration.from_pretrained(
            "facebook/musicgen-small",
            device_map="auto",
            torch_dtype=torch.float16 if torch.cuda.is_available() else torch.float32
        )
        processor = AutoProcessor.from_pretrained("facebook/musicgen-small")
        logger.info("‚úÖ –ú–æ–¥–µ–ª—å –∑–∞–≥—Ä—É–∂–µ–Ω–∞")

@app.get("/")
async def home():
    return {
        "message": "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä –º—É–∑—ã–∫–∏!",
        "endpoints": {
            "generate": "POST /generate",
            "health": "GET /health"
        }
    }

@app.get("/health")
async def health_check():
    return {"status": "ok", "torch_available": torch.cuda.is_available()}

@app.post("/generate")
async def generate_music(request: GenerationRequest):
    try:
        load_model()  # –ì–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ–º –∑–∞–≥—Ä—É–∑–∫—É –º–æ–¥–µ–ª–∏
        
        logger.info(f"üîÆ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –º—É–∑—ã–∫–∏: {request.prompt[:50]}...")
        logger.info(f"–ü–∞—Ä–∞–º–µ—Ç—Ä—ã: duration={request.duration}s, temp={request.temperature}")
        
        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–∞–Ω–∫–æ–≤
        num_chunks = max(1, int(request.duration / 10))
        
        full_audio = []
        for i in range(num_chunks):
            inputs = processor(
                text=[request.prompt],
                padding=True,
                return_tensors="pt",
            )
            
            audio_chunk = model.generate(
                **inputs,
                max_new_tokens=256,
                temperature=request.temperature,
                guidance_scale=request.guidance_scale,
            )
            
            full_audio.append(audio_chunk[0, 0].numpy())
            logger.info(f"‚úÖ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω —á–∞–Ω–∫ {i+1}/{num_chunks}")
        
        # –°–æ–±–∏—Ä–∞–µ–º –≤ –æ–¥–∏–Ω —Ç—Ä–µ–∫
        audio_array = np.concatenate(full_audio)
        sampling_rate = model.config.audio_encoder.sampling_rate
        
        # –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –≤ MP3
        wav_io = io.BytesIO()
        wav.write(wav_io, sampling_rate, audio_array)
        wav_io.seek(0)
        
        mp3_io = io.BytesIO()
        AudioSegment.from_wav(wav_io).export(mp3_io, format="mp3")
        mp3_io.seek(0)
        
        logger.info("üéµ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
        return {"audio": mp3_io.getvalue().hex()}  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º hex –¥–ª—è JSON
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: {str(e)}")
        return {"error": str(e)}

# –ó–∞–ø—É—Å–∫ —á–µ—Ä–µ–∑ Uvicorn (–µ—Å–ª–∏ —Ñ–∞–π–ª –∑–∞–ø—É—â–µ–Ω –Ω–∞–ø—Ä—è–º—É—é)
if __name__ == "__main__":
    import uvicorn
    port = int(os.environ.get("PORT", 8000))
    uvicorn.run(app, host="0.0.0.0", port=port)
